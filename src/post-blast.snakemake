# This is the minimumally process file output from SynMap.
INPUT='/scratch.global/broha006/projects/frac/masterFile_parsed.txt'
# Get the script containing directroy from the configuration file
MUNGE=config["dir"]["munge"]
# Get the location of the scratch directory that will house all of the temp files from the configuration file
SCRATCH=config["dir"]["scratch"]
DIR=config["dir"]["cache"] + "/coge/"
GENOS=['b73', 'ph207']
SAMPLES=['B73vB73', 'PH207vB73', 'PH207vPH207', 'B73vPH207']
# Load in some modules
#snakemake -p -s genomewide-blast.snakemake -F --configfile config.yml --cluster-config cluster.yaml --cluster "qsub -l {cluster.l} -m {cluster.m} -N {cluster.N} -r {cluster.r} -V" --jobs 2
def get_query(wildcards):
	if (wildcards.RUN == "B73vB73"):
		idx = "/home/hirschc1/shared/projects/fractionation/data/assests/B73CdsFaIndex"
	elif (wildcards.RUN == "PH207vPH207"):
		idx = "/home/hirschc1/shared/projects/fractionation/data/assests/PH207CdsFaIndex",
	elif (wildcards.RUN == "B73vPH207"):
		idx = "/home/hirschc1/shared/projects/fractionation/data/assests/B73CdsFaIndex",
	elif (wildcards.RUN == "PH207vB73"):
		idx = "/home/hirschc1/shared/projects/fractionation/data/assests/PH207CdsFaIndex"
	return(idx)
def get_blastIdx(wildcards):
	if (wildcards.RUN == "B73vB73"):
		idx = config["db"]["b73"]["genome"]
	elif (wildcards.RUN == "PH207vPH207"):
		idx = config["db"]["ph207"]["genome"]
	elif (wildcards.RUN == "B73vPH207"):
		idx = config["db"]["ph207"]["genome"]
	elif (wildcards.RUN == "PH207vB73"):
		idx = config["db"]["b73"]["genome"]
	return(idx)
def get_blast_input(wildcards):
	if (wildcards.RUN == "B73vB73"):
		myin = SCRATCH+"/B73vB73_blsn-target-file.txt"
	elif (wildcards.RUN == "PH207vPH207"):
		myin = SCRATCH+"/PH207vPH207_blsn-target-file.txt"
	elif (wildcards.RUN == "B73vPH207"):
		myin = SCRATCH+"/B73vPH207_blsn-target-file.txt"
	elif (wildcards.RUN == "PH207vB73"):
		myin = SCRATCH+"/B73vPH207_blsn-target-file.txt"
	return(myin)

# This defines all the output files to be generated in each step.
rule all:
	input:
		expand('{dir}/masterFile_parsed_coordinates.txt', dir=SCRATCH),
		expand('{dir}/tblastx_results.txt', dir=SCRATCH),
		expand('{dir}/masterFile_no-duplicates_r2.txt',dir=SCRATCH),
		expand('{dir}/blastNA_targets.txt', dir=SCRATCH),
		expand('{dir}/{RUN}_blastNA_output.txt2',dir=SCRATCH,RUN=SAMPLES),
		expand('{dir}/phony.txt', dir=SCRATCH),
		expand('{dir}/{RUN}_blastNA_output-scored.txt2',dir=SCRATCH,RUN=SAMPLES),
		expand('{dir}/master_updated.txt', dir=SCRATCH)

rule replace_coords:
	input: INPUT
	output: "{dir}/masterFile_parsed_coordinates.txt"
	params:
		b73_gff = config["genome"]["b73"]["gff"],
		ph207_gff = config["genome"]["ph207"]["gff"]
	shell:
		"""
		cut -f 2 {input} | grep ":" > {wildcards.dir}/b73_coordinates.txt
		cut -f 3 {input} | grep ":" >> {wildcards.dir}/b73_coordinates.txt
		cut -f 4 {input} | grep ":" > {wildcards.dir}/ph207_coordinates.txt
		cut -f 5 {input} | grep ":" >> {wildcards.dir}/ph207_coordinates.txt
		awk -F "[:-]" '{{printf $1"\\t"$2"\\t"$3"\\t"$0"\\n"}}' {wildcards.dir}/b73_coordinates.txt | bedtools intersect -wa -wb -a {params.b73_gff} -b - | awk '$3 == "gene"' | cut -f 9,13 | gawk -F "\\t" 'match($0,/ID=(Zm00001d[0-9]+)/,a) {{print a[1]"\\t"$2}}' > {wildcards.dir}/b73_coordinate-overlap.txt
		perl -i -pe 's/chr0//g' {wildcards.dir}/ph207_coordinates.txt
		perl -i -pe 's/chr//g' {wildcards.dir}/ph207_coordinates.txt
		awk '{{print "chr0"$0}}' {wildcards.dir}/ph207_coordinates.txt > {wildcards.dir}/ph207_coordinates.txt2
		perl -i -pe 's/chr010/chr10/g' {wildcards.dir}/ph207_coordinates.txt2
		awk -F "[:-]" '{{printf $1"\\t"$2"\\t"$3"\\t"$0"\\n"}}' {wildcards.dir}/ph207_coordinates.txt2 | bedtools intersect -wa -wb -a {params.ph207_gff} -b - | awk '$3 == "gene"' | cut -f 9,13 | gawk -F "\\t" 'match($0,/ID=(Zm00008a[0-9]+)/,a) {{print a[1]"\t"$2}}' > {wildcards.dir}/ph207_coordinate-overlap.txt
		perl /home/hirschc1/shared/projects/fractionation/munge/incorporate_coord_fill_qc.pl -i {wildcards.dir} -m {input} -o {output}
		"""

rule run_tblastx:
	input: rules.replace_coords.output
	params:
		b73 = "b73.out",
		ph207 = "ph207.out",
		sb = "sb.out",
		os = "os.out",
		clusterfile = "duplicate_clusters.txt",
		b73_cds = config["db"]["b73"]["cds"],
		ph207_cds = config["db"]["ph207"]["cds"],
		sb_cds = config["db"]["sb"]["cds"],
		os_cds = config["db"]["os"]["cds"]
	output: "{dir}/tblastx_results.txt"
	shell:
		"""
		perl {MUNGE}/filter_duplicates.pl -i {input} -c {params.clusterfile} -b {params.b73} -p {params.ph207} -s {params.sb} -o {params.os}
		blastdbcmd -db {params.os_cds} -entry_batch {params.os} | sed 's/lcl|//g' > {params.os}.fa
		blastdbcmd -db {params.sb_cds} -entry_batch {params.sb} | sed 's/lcl|//g' > {params.sb}.fa
		blastdbcmd -db {params.b73_cds} -entry_batch {params.b73} | sed 's/lcl|//g' > {params.b73}.fa
		blastdbcmd -db {params.ph207_cds} -entry_batch {params.ph207} | sed 's/lcl|//g' > {params.ph207}.fa
		cat {params.os}.fa {params.sb}.fa >> anchor_duplicates.fa
		perl {MUNGE}/run_tblastx.pl -c {params.clusterfile} -s anchor_duplicates.fa -b {params.b73}.fa -p {params.ph207}.fa -o {output}
		"""

rule parse_tblastx:
	input: rules.run_tblastx.output, rules.replace_coords.output
	output: "{dir}/masterFile_no-duplicates_r2.txt"
	run:
		shell("perl {MUNGE}/parse_tblastx_results.pl -i {input[0]} -m {input[1]} -o {output}")

rule update_storable:
	input: rules.parse_tblastx.output
	output: "{dir}/phony.txt"
	params:
		b73 = config["db"]["b73"]["storable"],
		ph207 = config["db"]["ph207"]["storable"],
		sb = config["db"]["sb"]["storable"],
		os = config["db"]["os"]["storable"]
	run:
		shell("perl {MUNGE}/update-storable.pl -i {input} -b {params.b73} -p {params.ph207} -s {params.sb} -o {params.os}")
		shell("touch {output}")

rule getNAtargets:
	input: rules.parse_tblastx.output
	output: "{dir}/blastNA_targets.txt"
	params:
		query = GENOS[0],
		subj = GENOS[1]
	run:
		shell("perl {MUNGE}/get_NA_realignments.pl --input {input} --query {params.query} --subj {params.subj} --out {output}")

rule blastNA:
	input: rules.getNAtargets.output
	params:
		fastaIndex = get_query,
		blastIndex = get_blastIdx,
		runType = "chr_region",
		run = "{RUN}"
	output: "{dir}/{RUN}_blastNA_output.txt2"
	run:
		shell("perl {MUNGE}/genomewide-blast.pl -i {input} -o {output} -f {params.fastaIndex} -b {params.blastIndex} -c {params.runType} -r {params.run}")

rule scoreNA:
	input: rules.blastNA.output
	params:
		mode = "blsn",
		run = "{RUN}",
		phony = "phoney.txt"
	output: "{dir}/{RUN}_blastNA_output-scored.txt2",
	run:
		shell("perl {MUNGE}/score_bl2seq_output.pl -i {input} -o {output} -m {params.mode} -r {params.run} -t {params.phony}")

rule updateMaster:
	input: rules.getNAtargets.output
	output: "{dir}/master_updated.txt"
	params:
		master="{dir}/masterFile_no-duplicates_r2.txt"
	shell:
		"""
		cat {wildcards.dir}/*_blastNA_output-scored.txt2 >> {wildcards.dir}/B73_PH207_blastNA_output2.txt
		perl /home/hirschc1/shared/projects/fractionation/munge/add_pairwise_status_to_master_file.pl --master {params.master} --blastna {wildcards.dir}/B73_PH207_blastNA_output2.txt --output {output}
		"""
